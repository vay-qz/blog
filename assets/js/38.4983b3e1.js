(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{240:function(t,v,_){"use strict";_.r(v);var a=_(0),l=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("div",{staticClass:"content"},[_("h2",{attrs:{id:"简述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简述","aria-hidden":"true"}},[t._v("#")]),t._v(" 简述")]),t._v(" "),_("p",[t._v("redis共有8种淘汰策略")]),t._v(" "),_("ol",[_("li",[t._v("拒绝")]),t._v(" "),_("li",[t._v("volitate-random")]),t._v(" "),_("li",[t._v("volitate-lru")]),t._v(" "),_("li",[t._v("volitate-lfu")]),t._v(" "),_("li",[t._v("volitate-ttl")]),t._v(" "),_("li",[t._v("allkeys-random")]),t._v(" "),_("li",[t._v("allkeys-lru")]),t._v(" "),_("li",[t._v("allkeys-lfu")])]),t._v(" "),_("p",[t._v("触发条件：当redis已经满足最大内存，且又有新的添加请求时\n除却拒绝以外的淘汰策略矩阵")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("淘汰范围\\淘汰方式")]),t._v(" "),_("th",[t._v("random")]),t._v(" "),_("th",[t._v("ttl")]),t._v(" "),_("th",[t._v("lru")]),t._v(" "),_("th",[t._v("lfu")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("volitate")]),t._v(" "),_("td",[t._v("volitate-random")]),t._v(" "),_("td",[t._v("volitate-ttl")]),t._v(" "),_("td",[t._v("volitate-lru")]),t._v(" "),_("td",[t._v("volitate-lfu")])]),t._v(" "),_("tr",[_("td",[t._v("allkeys")]),t._v(" "),_("td",[t._v("allkeys-random")]),t._v(" "),_("td",[t._v("/")]),t._v(" "),_("td",[t._v("allkeys-lru")]),t._v(" "),_("td",[t._v("allkeys-lfu")])])])]),t._v(" "),_("h2",{attrs:{id:"lru——最近最少未使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#lru——最近最少未使用","aria-hidden":"true"}},[t._v("#")]),t._v(" LRU——最近最少未使用")]),t._v(" "),_("p",[t._v("标准实现：使用链表将所有数据都进行链接，每次访问时将数据移至尾节点，每次淘汰时移除头节点\n缺点：")]),t._v(" "),_("ol",[_("li",[t._v("占用空间大。每个指针会占用字节，redis全部数据的指针会很多")]),t._v(" "),_("li",[t._v("损耗性能严重。链表的读取时间复杂度为O(n)，访问后修改链表太慢")])]),t._v(" "),_("p",[t._v("redis实现：\n​")]),t._v(" "),_("div",{staticClass:"language-cpp line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[t._v("RedisObject "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" lru"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br")])]),_("p",[t._v("在RedisObject对象中添加lru，存储的是最后访问的时间戳\n挑选n（默认n=5）个数据项，每次淘汰时，淘汰时间戳最小的一个")]),t._v(" "),_("h2",{attrs:{id:"lfu"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#lfu","aria-hidden":"true"}},[t._v("#")]),t._v(" LFU")]),t._v(" "),_("p",[t._v("标准实现：哈希表 + 链表\n缺点同LRU\nredis实现")]),t._v(" "),_("ol",[_("li",[t._v("使用lru字段，记录访问次数和最后访问时间。将lru字段分成了两部分，一部分记录使用次数，一部分记录时间")]),t._v(" "),_("li",[t._v("访问次数的增加采用概率随机算法，次数越多，增加的可能性越少")]),t._v(" "),_("li",[t._v("访问次数在一定时间间隔内会衰减")])]),t._v(" "),_("p",[t._v("淘汰同lru")])])}],!1,null,null,null);l.options.__file="淘汰策略.md";v.default=l.exports}}]);