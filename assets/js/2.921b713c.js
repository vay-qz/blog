(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{215:function(t,_,e){t.exports=e.p+"assets/img/sf.e569858d.png"},216:function(t,_,e){t.exports=e.p+"assets/img/bubble.33a947c7.gif"},217:function(t,_,e){t.exports=e.p+"assets/img/select.1c7e20f3.gif"},218:function(t,_,e){t.exports=e.p+"assets/img/insert.91b76e8e.gif"},219:function(t,_,e){t.exports=e.p+"assets/img/binary.d19701db.png"},220:function(t,_,e){t.exports=e.p+"assets/img/merge.cdda3f11.gif"},221:function(t,_,e){t.exports=e.p+"assets/img/count.3c7ddb59.gif"},222:function(t,_,e){t.exports=e.p+"assets/img/shell.671bd19a.gif"},223:function(t,_,e){t.exports=e.p+"assets/img/heap.7073c729.gif"},224:function(t,_,e){t.exports=e.p+"assets/img/quick.c411339b.gif"},225:function(t,_,e){t.exports=e.p+"assets/img/radix.3a6f1e50.gif"},254:function(t,_,e){"use strict";e.r(_);var s=[function(){var t=this.$createElement,_=this._self._c||t;return _("h1",{attrs:{id:"排序算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#排序算法","aria-hidden":"true"}},[this._v("#")]),this._v(" 排序算法")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"排序算法分类图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#排序算法分类图","aria-hidden":"true"}},[this._v("#")]),this._v(" 排序算法分类图")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("img",{attrs:{src:e(215),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"算法比较表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法比较表","aria-hidden":"true"}},[this._v("#")]),this._v(" 算法比较表")])},function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("table",[e("thead",[e("tr",[e("th",[t._v("算法名称")]),t._v(" "),e("th",[t._v("最好/最差/平均时间复杂度")]),t._v(" "),e("th",[t._v("空间复杂度")]),t._v(" "),e("th",[t._v("稳定性")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("冒泡排序")]),t._v(" "),e("td",[t._v("O(N) / O(N^2) / O(N^2)")]),t._v(" "),e("td",[t._v("O(1)")]),t._v(" "),e("td",[t._v("稳定")])]),t._v(" "),e("tr",[e("td",[t._v("简单选择排序")]),t._v(" "),e("td",[t._v("O(N^2) / O(N^2) / O(N^2)")]),t._v(" "),e("td",[t._v("O(1)")]),t._v(" "),e("td",[t._v("不稳定")])]),t._v(" "),e("tr",[e("td",[t._v("简单插入排序")]),t._v(" "),e("td",[t._v("O(N) / O(N^2) / O(N^2)")]),t._v(" "),e("td",[t._v("O(1)")]),t._v(" "),e("td",[t._v("稳定")])]),t._v(" "),e("tr",[e("td",[t._v("二分插入排序")]),t._v(" "),e("td",[t._v("O(N) / O(NlogN) / O(NlogN)")]),t._v(" "),e("td",[t._v("O(1)")]),t._v(" "),e("td",[t._v("稳定")])]),t._v(" "),e("tr",[e("td",[t._v("希尔排序")]),t._v(" "),e("td",[t._v("O(N) / O(N^2) / O(N^1.3)")]),t._v(" "),e("td",[t._v("O(1)")]),t._v(" "),e("td",[t._v("不稳定")])]),t._v(" "),e("tr",[e("td",[t._v("堆排序")]),t._v(" "),e("td",[t._v("O(NlogN) / O(NlogN) / O(NlogN)")]),t._v(" "),e("td",[t._v("O(1)")]),t._v(" "),e("td",[t._v("不稳定")])]),t._v(" "),e("tr",[e("td",[t._v("快速排序")]),t._v(" "),e("td",[t._v("O(N) / O(N^2) / O(NlogN)")]),t._v(" "),e("td",[t._v("O(NlogN)")]),t._v(" "),e("td",[t._v("不稳定")])]),t._v(" "),e("tr",[e("td",[t._v("归并排序")]),t._v(" "),e("td",[t._v("O(NlogN) / O(NlogN) / O(NlogN)")]),t._v(" "),e("td",[t._v("O(N)")]),t._v(" "),e("td",[t._v("稳定")])]),t._v(" "),e("tr",[e("td"),t._v(" "),e("td"),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("基数排序")]),t._v(" "),e("td",[t._v("O(NK) / O(NK) / O(NK)")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("稳定")])]),t._v(" "),e("tr",[e("td",[t._v("计数排序")]),t._v(" "),e("td",[t._v("O(N+K) / O(N+K) /O(N+K)")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("稳定")])]),t._v(" "),e("tr",[e("td",[t._v("桶排序")]),t._v(" "),e("td",[t._v("O(N) / O(N^2) / O(N+K)")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("稳定")])])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("div",{staticClass:"tip custom-block"},[_("p",{staticClass:"custom-block-title"},[this._v("解释")]),this._v(" "),_("p",[this._v("基数排序中的K:待排序数组中最大值的位数")]),this._v(" "),_("p",[this._v("计数/桶排序中的K:待排序数组中的最大值")])])},function(){var t=this.$createElement,_=this._self._c||t;return _("div",{staticClass:"tip custom-block"},[_("p",{staticClass:"custom-block-title"},[this._v("相关概念")]),this._v(" "),_("p",[this._v("稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。")]),this._v(" "),_("p",[this._v("不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。")])])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"三四句话算法讲解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三四句话算法讲解","aria-hidden":"true"}},[this._v("#")]),this._v(" 三四句话算法讲解")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"冒泡排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 冒泡排序")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("动图展示")])])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("img",{attrs:{src:e(216),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"简单选择排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简单选择排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 简单选择排序")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("动图展示")]),this._v(" "),_("img",{attrs:{src:e(217),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"简单插入排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简单插入排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 简单插入排序")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[this._v("假设当前排序数之前的数组有序，在之前的有序数组中"),_("strong",[this._v("顺序")]),this._v("找出当前排序数应该插入的位置并插入")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("动图展示")]),this._v(" "),_("img",{attrs:{src:e(218),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"二分插入排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二分插入排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 二分插入排序")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[this._v("假设当前排序数之前的数组有序，在之前的有序数组中"),_("strong",[this._v("使用二分算法")]),this._v("找出当前排序树应该插入的位置并插入")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("图片展示")]),this._v(" "),_("img",{attrs:{src:e(219),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"归并排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#归并排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 归并排序")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("动图展示")]),this._v(" "),_("img",{attrs:{src:e(220),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"桶排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#桶排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 桶排序")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"计数排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#计数排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 计数排序")])},function(){var t=this.$createElement,_=this._self._c||t;return _("ol",[_("li",[this._v("找出最大值，初始化大小为最大值的数组作为桶")]),this._v(" "),_("li",[this._v("将每个值填入对应编号的桶中，而后顺序遍历所有桶")])])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("动图展示")]),this._v(" "),_("img",{attrs:{src:e(221),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"n句话算法讲解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#n句话算法讲解","aria-hidden":"true"}},[this._v("#")]),this._v(" N句话算法讲解")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"希尔排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#希尔排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 希尔排序")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("比较普遍的inc取数公式")]),this._v("：")])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[this._v("初始化  inc=arr.length")]),this._v(" "),_("li",[this._v("inc=inc/3+1")])])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("动图展示")]),this._v(" "),_("img",{attrs:{src:e(222),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"堆排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#堆排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 堆排序")])},function(){var t=this.$createElement,_=this._self._c||t;return _("ol",[_("li",[this._v("将待排序数组当成完全二叉树：父节点>叶子节点，从最后一个非叶子节点进行堆调整")]),this._v(" "),_("li",[this._v("将调整好的二叉树的根节点与最后一个节点进行交换，继续调整堆并重复该步骤")])])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("动图展示")]),this._v(" "),_("img",{attrs:{src:e(223),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"快速排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快速排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 快速排序")])},function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("ol",[e("li",[t._v("选择最左侧值为key")]),t._v(" "),e("li",[t._v("先从右边遍历找到一个小于key的值right，再从左边遍历找到一个大于key的值left")]),t._v(" "),e("li",[t._v("交换left、right")]),t._v(" "),e("li",[t._v("重复2、3步骤直到左右指针重叠，交换key值和left的值")]),t._v(" "),e("li",[t._v("对left左右两边的数组分别在进行上述步骤")])])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("动图展示")]),this._v(" "),_("img",{attrs:{src:e(224),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"基数排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基数排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 基数排序")])},function(){var t=this.$createElement,_=this._self._c||t;return _("ol",[_("li",[this._v("找出最大值MAX，最大值的位数即为排序的次数MAXRADIX")]),this._v(" "),_("li",[this._v("准备10个桶，分别装入值为0-9的数")]),this._v(" "),_("li",[this._v("对所有数的某一位进行入桶，出桶")]),this._v(" "),_("li",[this._v("从低位到高位执行3步骤，执行MAXRADIX次")])])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("strong",[this._v("动图展示")]),this._v(" "),_("img",{attrs:{src:e(225),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"java代码示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java代码示例","aria-hidden":"true"}},[this._v("#")]),this._v(" Java代码示例")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"参考博客"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考博客","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考博客")])}],r=e(0),i=Object(r.a)({},function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),e("p",[t._v("教科书中一定会提到的算法，采用双重循环比较的方式，每次比较将较大的数置后，每次遍历将选出一个最大的数")]),t._v(" "),e("p",[t._v("由于每次遍历都会比较所有需要比较的数，且需要比较N次，故平均时间复杂度为O(N^2)")]),t._v(" "),e("p",[t._v("由于只是待排序中的数进行比较并不需要额外的空间，故空间复杂度为O(1)")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),e("p",[t._v("采用双重循环比较的方法，每次循环比较选出一个最小值与头部交换")]),t._v(" "),e("p",[t._v("由于每次遍历都会比较所有需要比较的数，且需要比较N次，故平均时间复杂度为O(N^2)")]),t._v(" "),e("p",[t._v("由于只是待排序中的数进行比较并不需要额外的空间，故空间复杂度为O(1)")]),t._v(" "),e("p",[t._v("不稳定反例数组：5 4 5 2")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),e("p",[t._v("由于每次遍历都有可能比较所有有序数组中的数，且需要比较N个数，故平均时间复杂度为O(N^2)")]),t._v(" "),e("p",[t._v("由于只是待排序中的数进行比较并不需要额外的空间，故空间复杂度为O(1)")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),e("p",[t._v("二分算法查找到目标的时间复杂度为O(logN)，一共需要查找N次，故平均时间复杂度为O(NlogN)")]),t._v(" "),e("p",[t._v("由于只是待排序中的数进行比较并不需要额外的空间，故空间复杂度为O(1)")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),e("p",[t._v("使用分治的思想，将数组等分为两个数组，将两个数组进行归并排序，将两个有序数组合并")]),t._v(" "),e("p",[t._v("数组每次二等分，直到数组数量为1，经历了logN次，合并一共需要对N个数排序，故时间复杂度为O(NlogN)")]),t._v(" "),e("p",[t._v("合并时需要申请空间进行数组合并，故空间复杂度为O(N)")]),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),e("p",[t._v("将所有待排序数根据特定的函数公式分别放入多个桶中，对每个桶进行排序")]),t._v(" "),e("p",[t._v("注意：该算法的函数公式是否可以将所有数尽可能的平均分配到桶中，以及对单个桶采用的排序算法，都决定了桶排序算法总体的优劣")]),t._v(" "),t._m(22),t._v(" "),e("p",[t._v("桶排序的极致")]),t._v(" "),t._m(23),t._v(" "),e("p",[t._v("只需要遍历两遍待排序数组加一遍桶，故时间复杂度为O(N)")]),t._v(" "),e("p",[t._v("适用范围：正整数")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),e("p",[t._v("又称为缩小增量排序，取整数inc作为间隔将全部元素分为inc个子序列，对每一份进行简单插入排序，而后缩小inc，直到inc=1")]),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),e("p",[t._v("由于只是待排序中的数进行比较并不需要额外的空间，故空间复杂度为O(1)")]),t._v(" "),e("p",[t._v("不稳定反例：1 5 6 3 4 5")]),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),e("p",[t._v("堆：完全二叉树")]),t._v(" "),e("p",[t._v("大根堆：父节点 > 叶子节点")]),t._v(" "),e("p",[t._v("小根堆：父节点 < 叶子节点")]),t._v(" "),e("p",[t._v("排序过程")]),t._v(" "),t._m(31),t._v(" "),e("p",[t._v("N个数形成的堆的高度为logN，需要调整N个数，故时间复杂度为O(NlogN)")]),t._v(" "),e("p",[t._v("由于只是待排序中的数进行比较并不需要额外的空间，故空间复杂度为O(1)")]),t._v(" "),e("p",[t._v("不稳定反例：9 8 7 6 5 6")]),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),e("p",[t._v("使用分治的思想")]),t._v(" "),t._m(34),t._v(" "),e("p",[t._v("注意点：选左侧值为key则要先从右侧开始找，反之要先从左侧开始找")]),t._v(" "),e("p",[t._v("分治的思想将数组分为两份，平均需要分logN次，一遍需要遍历N个数，故时间复杂度为O(NlogN)")]),t._v(" "),e("p",[t._v("不稳定反例：5 7 7 1 1")]),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),e("p",[t._v("每次对所有数进行遍历，遍历次数为K次，故时间复杂度为O(NK)次")]),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/VAS-QZ/keep-doing-exercises/blob/master/src/main/java/Sort.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/VAS-QZ/keep-doing-exercises/blob/master/src/main/java/Sort.java"),e("OutboundLink")],1)]),t._v(" "),t._m(40),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/onepixel/articles/7674659.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/onepixel/articles/7674659.html"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("所用到的图来自于互联网，图侵删")])])},s,!1,null,null,null);i.options.__file="排序.md";_.default=i.exports}}]);