(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{175:function(t,e,a){t.exports=a.p+"assets/img/4.c7d253ac.png"},176:function(t,e,a){t.exports=a.p+"assets/img/serial.74cf9602.png"},177:function(t,e,a){t.exports=a.p+"assets/img/ParNew.e4344340.png"},178:function(t,e,a){t.exports=a.p+"assets/img/CMS.77e73d6b.png"},179:function(t,e,a){t.exports=a.p+"assets/img/G1.08087c2c.png"},180:function(t,e,a){t.exports=a.p+"assets/img/mixgc.3f1e295a.png"},181:function(t,e,a){t.exports=a.p+"assets/img/5.9df8a89f.png"},267:function(t,e,a){"use strict";a.r(e);var r=[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"垃圾收集器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器","aria-hidden":"true"}},[this._v("#")]),this._v(" 垃圾收集器")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(175),alt:""}})])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#年轻代垃圾收集器"}},[t._v("年轻代垃圾收集器")]),a("ul",[a("li",[a("a",{attrs:{href:"#serial"}},[t._v("Serial")])]),a("li",[a("a",{attrs:{href:"#parnew"}},[t._v("ParNew")])]),a("li",[a("a",{attrs:{href:"#parallel-scavenge"}},[t._v("Parallel Scavenge")])])])]),a("li",[a("a",{attrs:{href:"#老年代"}},[t._v("老年代")]),a("ul",[a("li",[a("a",{attrs:{href:"#serial-old"}},[t._v("Serial Old")])]),a("li",[a("a",{attrs:{href:"#parallel-old"}},[t._v("Parallel Old")])]),a("li",[a("a",{attrs:{href:"#cms"}},[t._v("CMS")])])])]),a("li",[a("a",{attrs:{href:"#g1"}},[t._v("G1")]),a("ul",[a("li",[a("a",{attrs:{href:"#新的内存区域划分"}},[t._v("新的内存区域划分")])]),a("li",[a("a",{attrs:{href:"#垃圾回收"}},[t._v("垃圾回收")]),a("ul",[a("li",[a("a",{attrs:{href:"#young-gc"}},[t._v("Young GC")])]),a("li",[a("a",{attrs:{href:"#mix-gc"}},[t._v("Mix GC")])])])]),a("li",[a("a",{attrs:{href:"#q-a"}},[t._v("Q&A")])])])]),a("li",[a("a",{attrs:{href:"#jvm参数表"}},[t._v("JVM参数表")])]),a("li",[a("a",{attrs:{href:"#参考资料"}},[t._v("参考资料")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"年轻代垃圾收集器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#年轻代垃圾收集器","aria-hidden":"true"}},[this._v("#")]),this._v(" 年轻代垃圾收集器")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"serial"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#serial","aria-hidden":"true"}},[this._v("#")]),this._v(" Serial")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(176),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"parnew"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parnew","aria-hidden":"true"}},[this._v("#")]),this._v(" ParNew")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(177),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"parallel-scavenge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge","aria-hidden":"true"}},[this._v("#")]),this._v(" Parallel Scavenge")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("吞吐量=程序运行时间/(程序运行时间+垃圾回收时间)\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("吞吐量")]),this._v(" "),e("li",[this._v("最大停顿时间")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"老年代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#老年代","aria-hidden":"true"}},[this._v("#")]),this._v(" 老年代")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"serial-old"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#serial-old","aria-hidden":"true"}},[this._v("#")]),this._v(" Serial Old")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"parallel-old"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old","aria-hidden":"true"}},[this._v("#")]),this._v(" Parallel Old")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"cms"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cms","aria-hidden":"true"}},[this._v("#")]),this._v(" CMS")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(178),alt:""}})])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[a("p",[t._v("初次标记")]),t._v(" "),a("p",[t._v("标记GC ROOTS直接引用的对象")])]),t._v(" "),a("li",[a("p",[t._v("并发标记")]),t._v(" "),a("p",[t._v("GC ROOTS Tracing的过程，可以和用户线程同时进行")])]),t._v(" "),a("li",[a("p",[t._v("重新标记")]),t._v(" "),a("p",[t._v("修改在并发标记阶段由于用户线程的运行而产生变动的标记记录")])]),t._v(" "),a("li",[a("p",[t._v("垃圾清除")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("CPU资源敏感")]),this._v(" "),e("li",[this._v("无法处理浮动垃圾")]),this._v(" "),e("li",[this._v("标记清除算法本身缺陷")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"g1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#g1","aria-hidden":"true"}},[this._v("#")]),this._v(" G1")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"新的内存区域划分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新的内存区域划分","aria-hidden":"true"}},[this._v("#")]),this._v(" 新的内存区域划分")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(179),alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"垃圾回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收","aria-hidden":"true"}},[this._v("#")]),this._v(" 垃圾回收")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"young-gc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#young-gc","aria-hidden":"true"}},[this._v("#")]),this._v(" Young GC")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Card，每一个Region被分成了一个个Card，概念类似于书的每一页")]),this._v(" "),e("li",[this._v("Remebered Set，简称RSet，是一个Hashtable，key为Region的起始值，Value是一个集合，记录Card的下标。RSet用来记录本区域被哪些区域引用，每个Region一个")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"mix-gc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mix-gc","aria-hidden":"true"}},[this._v("#")]),this._v(" Mix GC")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(180),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在这里要介绍一种算法——"),e("strong",[this._v("三色标记法")]),this._v("，这也是CMS和G1使用的标记算法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("首先将GC ROOTS标记为黑色，于其直接相连的对象标记为灰色，其余的对象为白色")])]),this._v(" "),e("li",[e("p",[this._v("进行引用链遍历，被遍历到的对象被标记为灰色")])]),this._v(" "),e("li",[e("p",[this._v("标记结束后为白色的对象就是不可达对象，可以被回收")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(181),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("在插入时记录")]),this._v(" "),e("li",[this._v("在删除时记录")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"q-a"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q-a","aria-hidden":"true"}},[this._v("#")]),this._v(" Q&A")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[a("p",[t._v("Mix GC什么情况下会触发呢？")]),t._v(" "),a("ul",[a("li",[t._v("我们都知道，G1收集器是可以通过设置*-XX:MaxGCPauseMillis*参数预测停顿时间的。G1会通过垃圾回收来建立自己的垃圾回收模型，当其认为回收这些垃圾可能会停顿目标时间时，就会触发Mix GC")]),t._v(" "),a("li",[t._v("-XX:InitiatingHeapOccupancyPercent参数可以设置老年代占整个堆的大小，当老年代超过这个阈值时，也会触发Mix GC")])])]),t._v(" "),a("li",[a("p",[t._v("除了Mix GC担保失败还有哪种可能会触发Full GC？")]),t._v(" "),a("p",[t._v("用户申请内存的速度大于垃圾回收的速度")])]),t._v(" "),a("li",[a("p",[t._v("在G1中我们是可以设置垃圾收集期望时间的，那么G1是如何在规定的时间内回收尽可能多的垃圾呢？")]),t._v(" "),a("p",[t._v("在G1种有一个垃圾回收价值表，用来记录每个Region的垃圾回收价值，在收集垃圾阶段，G1收集器会在设定时间内，优先回收价值高的Region")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"jvm参数表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jvm参数表","aria-hidden":"true"}},[this._v("#")]),this._v(" JVM参数表")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("作用")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("UseSerialGC")]),t._v(" "),a("td",[t._v("Serial+Serial Old")])]),t._v(" "),a("tr",[a("td",[t._v("UseParNewGC")]),t._v(" "),a("td",[t._v("ParNew+Serial Old")])]),t._v(" "),a("tr",[a("td",[t._v("UseConcMarkSweepGC")]),t._v(" "),a("td",[t._v("PParNew+CMS+Serial Old")])]),t._v(" "),a("tr",[a("td",[t._v("UseParallelGC")]),t._v(" "),a("td",[t._v("Parallel Scanvenge+Serial Old")])]),t._v(" "),a("tr",[a("td",[t._v("UseParallelOldGC")]),t._v(" "),a("td",[t._v("Parallel Scanvenge+Parallel Old")])]),t._v(" "),a("tr",[a("td",[t._v("SurvivorRatio")]),t._v(" "),a("td",[t._v("Eden与Survivor的比例，默认8：1")])]),t._v(" "),a("tr",[a("td",[t._v("PretenureSizeThreshold")]),t._v(" "),a("td",[t._v("大于该值直接在老年代分配")])]),t._v(" "),a("tr",[a("td",[t._v("MaxTenuringThreshold")]),t._v(" "),a("td",[t._v("晋升老年代的年龄")])]),t._v(" "),a("tr",[a("td",[t._v("UseAdaptiveSizePolicy")]),t._v(" "),a("td",[t._v("动态调整晋升老年代的年龄")])]),t._v(" "),a("tr",[a("td",[t._v("HandlePromotionFailure")]),t._v(" "),a("td",[t._v("允许担保失败")])]),t._v(" "),a("tr",[a("td",[t._v("ParallelGCThreads")]),t._v(" "),a("td",[t._v("使用Parallel Scanvenge时的线程数")])]),t._v(" "),a("tr",[a("td",[t._v("GCTimeRatio")]),t._v(" "),a("td",[t._v("吞吐量")])]),t._v(" "),a("tr",[a("td",[t._v("MaxGCPauseMills")]),t._v(" "),a("td",[t._v("最大停顿时间")])]),t._v(" "),a("tr",[a("td",[t._v("CMSInitiationOcccupancyFraction")]),t._v(" "),a("td",[t._v("内存满足多少时进行垃圾回收")])]),t._v(" "),a("tr",[a("td",[t._v("UseCMSCompactAtFullCollection")]),t._v(" "),a("td",[t._v("在CMS垃圾回收后进行内存压缩")])]),t._v(" "),a("tr",[a("td",[t._v("CMSFullGCsBeforeCompaction")]),t._v(" "),a("td",[t._v("在CMS进行若干次垃圾回收后进行内存压缩")])]),t._v(" "),a("tr",[a("td",[t._v("UseG1GC")]),t._v(" "),a("td",[t._v("使用G1垃圾收集器")])]),t._v(" "),a("tr",[a("td",[t._v("InitiatingHeapOccupancyPercent")]),t._v(" "),a("td",[t._v("老年代在堆中的比例，大于时触发Mix GC")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考资料")])}],i=a(0),_=Object(i.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("p",[t._v("上一章中说到了垃圾回收算法，那么垃圾回收算法是如何实现以及在jvm中是如何体现的呢？这就是本章所要说的内容。jvm中使用垃圾回收器来实现垃圾回收算法")]),t._v(" "),a("p",[t._v("在Hotspot中，垃圾回收使用的是分代回收算法。将java堆分为了年轻代和老年代。分别使用不同的垃圾收集器来进行垃圾回收，如下图所示")]),t._v(" "),t._m(1),t._v(" "),a("p",[t._v("接下来我们逐一分析这些垃圾收集器")]),t._v(" "),a("p"),t._m(2),a("p"),t._v(" "),t._m(3),t._v(" "),a("p",[t._v("Hotspot在年轻代中有三种收集器可以供大家选择：Serial、ParNew、Parallel Scavenge")]),t._v(" "),t._m(4),t._v(" "),a("p",[t._v("Serial是“最古老“的垃圾收集器，它使用的是标记-复制法进行垃圾回收。该垃圾收集器是一个单线程收集器，其收集垃圾的过程如下图")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),a("p",[t._v("ParNew垃圾收集器是Serial的多线程版本，它们也共用了很多代码，但是在一些情况下ParNew并不比Serial更高效，如果是在单CPU的机子上，Serial由于没有线程的切换，反而效果更好，其收集垃圾的过程如下图")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),a("p",[t._v("Parallel Scavenge收集器和前两种收集器最大的不同在于其关注的并不是最短停顿时间，而是吞吐量")]),t._v(" "),t._m(9),a("p",[t._v("Parallel Scavenge收集器也是一个并发收集器，在Parallel Scavenge收集器中，我们可以设置两个参数来对其进行控制")]),t._v(" "),t._m(10),t._v(" "),a("p",[t._v("需要注意的是，并不是将最大停顿时间设置的很小系统就越快，Parallel  Scavenge收集器会通过频繁的垃圾回收来保证最大停顿时间")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),a("p",[t._v("Serial Old是Serial的老年代版本，采用标记整理算法，也是一个单线程的收集器")]),t._v(" "),t._m(13),t._v(" "),a("p",[t._v("Parallel Old收集器是Parallel Scavenge的老年代版本。在Parallel Old垃圾收集器出现之前，Parallel Scaverge垃圾收集器只能和Serial Old老年代垃圾收集器配合使用，而Serial Old垃圾收集器在server状态下的表现很差，Parallel Old垃圾收集器出现之后，才有了真正意义上的关注于吞吐量的垃圾收集器的组合")]),t._v(" "),t._m(14),t._v(" "),a("p",[t._v("CMS——Cocurunt Mark Swap，从其名字我们就可以看出其特性：并发垃圾收集器，采用标记清除算法")]),t._v(" "),t._m(15),t._v(" "),a("p",[t._v("CMS的垃圾清除过程可以分为如下几步")]),t._v(" "),t._m(16),t._v(" "),a("p",[t._v("缺陷")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),a("p",[t._v("G1——Garbage First，从jdk1.7中加入，在jdk1.9中将其设置为jvm的默认处理器。其使命为在未来代替CMS处理器，然而其并不仅仅是一个老年代垃圾收集器，G1的内存管理范围是整个Java堆。")]),t._v(" "),t._m(19),t._v(" "),a("p",[t._v("G1将内存分为了一个个Region，当然在G1中也保存了年轻代和老年代的概念，但是G1中的老年代和年轻代已经不是一整块连续的内存了，而且一系列Region的集合。其内存分配逻辑图如下")]),t._v(" "),t._m(20),t._v(" "),a("p",[t._v("其中Humongous区域用来存储大对象，由于G1整体采用的是标记复制算法，使用专门的一类区域来进行存储可以避免大对象在垃圾回收时进行复制")]),t._v(" "),t._m(21),t._v(" "),a("p",[t._v("G1垃圾收集器中有两种垃圾回收方式：Young GC和Mix GC")]),t._v(" "),t._m(22),t._v(" "),a("p",[t._v("Young GC回收使用的是标记复制算法。它的触发条件为Eden区满了。")]),t._v(" "),a("p",[t._v("Young GC进行垃圾回收时Eden区的存活对象放入Survior to区，放不下的进入老年代；Survior from区放入Survior to区，满足晋升年龄的晋升至老年代。由于采用的同样是标记复制算法，在对对象进行标记时，如果年轻代有老年代的引用，就需要对全部老年代进行遍历，为了解决每次Young GC时都需要对老年代全部遍历的问题，G1引入了两个概念")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),a("p",[t._v("Mix GC会回收部分老年代和整个年轻代。")]),t._v(" "),a("p",[t._v("Mixed GC采用的同样是标记复制算法，其并发标记流程图如下")]),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),a("p",[t._v("由于并发标记的过程是和用户线程一起进行的，所以在标记的过程中会出现下图情况")]),t._v(" "),t._m(28),t._v(" "),a("p",[t._v("如图，在并发标记时对象的引用关系如before，并发标记之后对象的引用关系如after，那么对于这种情况，我们就需要对在并发标记阶段变动的对象关系进行记录，那么什么时候进行记录呢？有两种情况")]),t._v(" "),t._m(29),t._v(" "),a("p",[t._v("CMS和G1分别使用第一种和第二种，并发标记阶段对操作的对象进行记录，在最终标记时对记录的信息在进行处理")]),t._v(" "),a("p",[t._v("在并发标记完成之后的某一时刻开始垃圾回收，垃圾回收采用的同样是标记复制算法，我们都知道标记复制算法是需要额外的空间进行担保的，Mix GC针对的是整个堆，那么如何进行担保呢？")]),t._v(" "),a("p",[t._v("如果Mix GC在进行垃圾回收时发现to-space空间不足，就会触发Full GC")]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/548c67aa1bc0",target:"_blank",rel:"noopener noreferrer"}},[t._v("G1从入门到放弃（一）"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/zhou2s_101216/article/details/79202893",target:"_blank",rel:"noopener noreferrer"}},[t._v("对G1垃圾回收器的理解"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("《深入理解Java虚拟机》")])])},r,!1,null,null,null);_.options.__file="垃圾收集器.md";e.default=_.exports}}]);