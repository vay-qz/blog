(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{270:function(a,e,t){"use strict";t.r(e);var s=t(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"content"},[t("p",[a._v("java中的集合有list、set、map、queue这三种，它们都基于collection接口实现。")]),a._v(" "),t("h2",{attrs:{id:"常用集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用集合","aria-hidden":"true"}},[a._v("#")]),a._v(" 常用集合")]),a._v(" "),t("h3",{attrs:{id:"list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list","aria-hidden":"true"}},[a._v("#")]),a._v(" list")]),a._v(" "),t("p",[a._v("list的实现类有ArrayList、LinkedList三种\nArrayList由数组实现，内部记录当前容量\n添加元素：使用数组偏移量定位存放位置，当容量超过现有容量时会进行扩容，每次扩容增加原来容量的1/2\n插入元素：对数组中插入偏移量之后的内容进行批量后移\n删除元素：对数组中删除偏移量之后的内容进行批量前移\n查找元素：使用数组偏移量进行查找\nLinkedList由双向链表实现，增删查改操作同链表\nArrayList和LinkedList都不是线程安全的，如果需要保证线程安全，可以使用Collection.synchronize方法进行包装")]),a._v(" "),t("h2",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map","aria-hidden":"true"}},[a._v("#")]),a._v(" Map")]),a._v(" "),t("p",[a._v("map的实现类主要有HashMap，TreeMap，LinkedHashMap。\nHashmap使用数组存储元素，当发送hash冲突时使用链表解决冲突，当链表长度超过8时使用红黑树\n无冲突时添加/取元素时间复杂度：O(1)\n冲突时添加元素/取时间复杂度：O(logn)，n为链表长度\nTreeMap与HashMap相同，且其中元素有序（按照添加顺序）\nTreemap使用红黑树来使得元素有序，读、写时间复杂度都为O(logn)\nLinkedHashMap与HashMap相同，常用来实现LRU队列")]),a._v(" "),t("h3",{attrs:{id:"set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set","aria-hidden":"true"}},[a._v("#")]),a._v(" Set")]),a._v(" "),t("p",[a._v("set的实现类主要是HashSet，TreeSet两种，实现方式同HashMap|TreeMap")]),a._v(" "),t("h2",{attrs:{id:"queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#queue","aria-hidden":"true"}},[a._v("#")]),a._v(" Queue")]),a._v(" "),t("p",[a._v("Queue的实现类为ArrayQueue，使用数组实现，并且添加了头尾指针")])])}],!1,null,null,null);r.options.__file="Java集合.md";e.default=r.exports}}]);